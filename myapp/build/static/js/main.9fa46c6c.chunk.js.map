{"version":3,"sources":["Ninjas.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","_ref","ninjaList","ninjas","map","ninja","react_default","a","createElement","className","key","id","name","age","belt","App","state","src_Ninjas","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMA2BeA,EAnBA,SAAAC,GAAgB,IAExBC,EAFwBD,EAAbE,OAEQC,IAAI,SAAAC,GAC5B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,IAAML,EAAMM,IAClCL,EAAAC,EAAAC,cAAA,oBAAaH,EAAMO,MACnBN,EAAAC,EAAAC,cAAA,mBAAYH,EAAMQ,KAClBP,EAAAC,EAAAC,cAAA,oBAAaH,EAAMS,SAKtB,OACCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZP,ICEUa,6MAnBdC,MAAQ,CACPb,OAAS,CACR,CAAES,KAAO,MAAOC,IAAM,GAAIC,KAAO,QAASH,GAAK,GAC/C,CAAEC,KAAO,QAASC,IAAM,GAAIC,KAAO,QAASH,GAAK,GACjD,CAAEC,KAAO,UAAWC,IAAM,GAAIC,KAAO,OAAQH,GAAK,6EAKnD,OACCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACS,EAAD,CAAQd,OAASe,KAAKF,MAAMb,iBAfdgB,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9fa46c6c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// in class based components props are automatically attached to the instance of the component and we use this.props to access them\r\n// in function based components we pass props as a parameter and we don't use this.props\r\n\r\n// const Ninjas = (props) => {\r\n//\tconst { ninjas } = props; // this works but we can write it differently\r\n\r\nconst Ninjas = ({ ninjas }) => { // we can stack multiple props in here, e.g. { ninjas, locations }\r\n\r\n\tconst ninjaList = ninjas.map(ninja => {\r\n\t\treturn (\r\n\t\t\t<div className=\"ninja\" key={ ninja.id }>\r\n\t\t\t\t<div>Name: { ninja.name }</div>\r\n\t\t\t\t<div>Age: { ninja.age }</div>\r\n\t\t\t\t<div>Belt: { ninja.belt }</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"ninja-list\">\r\n\t\t\t{ ninjaList }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Ninjas;\r\n\r\n","import React, { Component } from 'react';\nimport Ninjas from './Ninjas';\n\nclass App extends Component {\n\n\tstate = {\n\t\tninjas : [\n\t\t\t{ name : \"Ryu\", age : 30, belt : \"black\", id : 1 },\n\t\t\t{ name : \"Yoshi\", age : 25, belt : \"green\", id : 2 },\n\t\t\t{ name : \"Crystal\", age : 20, belt : \"pink\", id : 3 }\n\t\t]\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>My first react app</h1>\n\t\t\t\t<p>Welcome :)</p>\n\t\t\t\t<Ninjas ninjas={ this.state.ninjas } />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}