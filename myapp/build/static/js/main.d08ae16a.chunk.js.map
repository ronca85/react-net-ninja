{"version":3,"sources":["Ninjas.js","AddNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","_ref","ninjas","deleteNinja","ninjaList","map","ninja","age","react_default","a","createElement","className","key","id","name","belt","onClick","AddNinja","state","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","props","addNewNinjaProp","onSubmit","this","htmlFor","type","onChange","Component","App","addNewNinja","newNinja","Math","random","ninjasCopy","concat","toConsumableArray","console","log","ninjasFilteredArray","filter","prevProps","prevState","src_Ninjas","src_AddNinja","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d08ae16a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Ninjas = ({ ninjas, deleteNinja }) => {\r\n\tconst ninjaList = ninjas.map(ninja => {\r\n\t\tif (ninja.age > 20) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"ninja\" key={ ninja.id }>\r\n\t\t\t\t\t<div>Name: { ninja.name }</div>\r\n\t\t\t\t\t<div>Age: { ninja.age }</div>\r\n\t\t\t\t\t<div>Belt: { ninja.belt }</div>\r\n\t\t\t\t\t<button onClick={ () => {deleteNinja(ninja.id)} }>Delete ninja</button>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"ninja-list\">\r\n\t\t\t{ ninjaList }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Ninjas;\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddNinja extends Component {\r\n\r\n\tstate = {\r\n\t\tname: null,\r\n\t\tage: null,\r\n\t\tbelt: null\r\n\t}\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\t[e.target.id]: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\t// console.log( this.state );\r\n\t\t// this.props.addNewNinjaProp( this.state ); // state changes and gets exported to the App component as a prop\r\n\t\tthis.props.addNewNinjaProp({\r\n\t\t\tname: this.state.name,\r\n\t\t\tage: this.state.age,\r\n\t\t\tbelt: this.state.belt\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={ this.handleSubmit }>\r\n\t\t\t\t\t<label htmlFor=\"name\">Name: </label>\r\n\t\t\t\t\t<input type=\"text\" id=\"name\" onChange={ this.handleChange } />\r\n\t\t\t\t\t<label htmlFor=\"age\">Age: </label>\r\n\t\t\t\t\t<input type=\"text\" id=\"age\" onChange={ this.handleChange } />\r\n\t\t\t\t\t<label htmlFor=\"belt\">Belt: </label>\r\n\t\t\t\t\t<input type=\"text\" id=\"belt\" onChange={ this.handleChange } />\r\n\t\t\t\t\t<button>Submit</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default AddNinja;\r\n\r\n","import React, { Component } from 'react';\nimport Ninjas from './Ninjas';\nimport AddNinja from './AddNinja';\n\nclass App extends Component {\n\n\tstate = {\n\t\tninjas : [\n\t\t\t{ name : \"Ryu\", age : 30, belt : \"black\", id : 1 },\n\t\t\t{ name : \"Yoshi\", age : 25, belt : \"green\", id : 2 },\n\t\t\t{ name : \"Crystal\", age : 20, belt : \"pink\", id : 3 }\n\t\t]\n\t}\n\n\taddNewNinja = (newNinja) => {\n\t\t// console.log( newNinja ); // newNinja is the state that was imported from the AddNinja component\n\t\tnewNinja.id = Math.random();\n\t\tlet ninjasCopy = [...this.state.ninjas, newNinja]; // \"spreads\" (...) the ninjas by taking all of its elements and the brackets [] are creating a new array, effectively copying the original array. we have to do this and create a copy of an array this way every time we need to manipulate an array in order not to corrupt the original array.\n\t\tconsole.log( this.state.ninjas );\n\t\tthis.setState({\n\t\t\tninjas: ninjasCopy\n\t\t})\n\t}\n\n\tdeleteNinja = (id) => {\n\t\t// console.log( id );\n\t\tlet ninjasFilteredArray = this.state.ninjas.filter(ninja => { // filter is a non-destructive method of \"deleting\" ninjas from the array\n\t\t\treturn ninja.id !== id; // if ids are the same, filter it out. if not, get into the new array\n\t\t});\n\t\tthis.setState({\n\t\t\tninjas: ninjasFilteredArray\n\t\t})\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"component mounted\");\n\t\tconsole.log(\"for more visit: http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\");\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconsole.log(\"component updated\");\n\t\tconsole.log(prevProps, prevState);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>My first react app</h1>\n\t\t\t\t<p>Welcome :)</p>\n\t\t\t\t<Ninjas deleteNinja={this.deleteNinja} ninjas={ this.state.ninjas } />\n\t\t\t\t<AddNinja addNewNinjaProp={ this.addNewNinja } />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}