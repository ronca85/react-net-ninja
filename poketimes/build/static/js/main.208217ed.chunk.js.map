{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","react_default","a","createElement","className","href","react_router_dom","to","Home","console","log","this","posts","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","connect","state","Rainbow","WrappedComponent","colours","classNameColor","Math","floor","random","Contact","Post","handleClick","_this","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","components_Navbar","react_router","exact","path","component","About","Boolean","window","location","hostname","initState","rootReducer","arguments","undefined","action","newPosts","filter","Object","objectSpread","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.208217ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from \"react\";\r\nimport { Link, NavLink, withRouter } from \"react-router-dom\";\r\n\r\nconst Navbar = (props) => { // if you pass in props the props get all the router information\r\n\t// console.log(props);\r\n\t// setTimeout(() => {\r\n\t// \tprops.history.push(\"/about\");\r\n\t// }, 2000);\r\n\treturn (\r\n\t\t<nav className=\"nav-wrapper red darken-3\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<a href=\"/\" className=\"brand-logo\">Poke'Times</a>\r\n\t\t\t\t<ul className=\"right\">\r\n\t\t\t\t\t<li><Link to=\"/\">Home</Link></li>\r\n\t\t\t\t\t<li><NavLink to=\"/about\">About</NavLink></li>\r\n\t\t\t\t\t<li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pokeball from \"../pokeball.png\";\r\nimport { connect } from \"react-redux\";\r\n// connect is a function and it brings back a higher order component\r\n// we need to invoke the connect() function and then wrap the component\r\n// connect()(Home)\r\n\r\nclass Home extends Component {\r\n\trender() {\r\n\t\tconsole.log(this.props)\r\n\t\tconst { posts } = this.props; // grab the posts from the props which were definde on the bottom and come from redux (the warehouse)\r\n\t\tconst postList = posts.length ? (\r\n\t\t\tposts.map(post => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className=\"post card\" key={post.id}>\r\n\t\t\t\t\t\t<img src={Pokeball} alt=\"A Pokeball\" />\r\n\t\t\t\t\t\t<div className=\"card-content\">\r\n\t\t\t\t\t\t\t<Link to={\"/\" + post.id}>\r\n\t\t\t\t\t\t\t\t<span className=\"card-title red-text\">\r\n\t\t\t\t\t\t\t\t\t{post.title}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t{post.body}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t) : (\r\n\t\t\t<div className=\"center\">No posts yet</div>\r\n\t\t)\r\n\t\treturn (\r\n\t\t\t<div className=\"container home\">\r\n\t\t\t\t<h4 className=\"center\">Home</h4>\r\n\t\t\t\t{postList}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// we now need to grab data from the central store \"Redux\" (warehouse)\r\n// if a component wants some date from the warehouse wee need to map that data to the props of the component\r\nconst mapStateToProps = (state) => { // (state) is the state of the warehouse\r\n\treturn {\r\n\t\tposts: state.posts\r\n\t}\r\n}\r\n\r\n// mapStateToProps defines what data we want to grab from the warehouse (state.props)\r\n// and what property to apply the props object to (props:)\r\nexport default connect(mapStateToProps)(Home);\r\n\r\n","import React from \"react\";\r\nimport Rainbow from \"../hoc/Rainbow\";\r\n\r\nconst About = () => {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"center\">About</h4>\r\n\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis excepturi ut pariatur, officiis repellendus tenetur delectus perspiciatis et numquam fuga beatae quas non impedit harum voluptatibus, nobis, dolores libero cumque?</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Rainbow(About);\r\n\r\n","import React from \"react\";\r\n\r\nconst Rainbow = (WrappedComponent) => { // when you use withRouter t wrap a component you receive the wrapped component as a parameter\r\n\r\n\tconst colours = [\"red\", \"pink\", \"orange\", \"blue\", \"green\", \"yellow\"];\r\n\t// const randomColour = colours[Math.floor(Math.random() * 5)];\r\n\tconst randomColour = colours[Math.floor(Math.random() * colours.length )];\r\n\t// console.log(randomColour);\r\n\tconst classNameColor = randomColour + \"-text\"; // materilize.css class stuff\r\n\r\n\treturn (props) => {\r\n\t\treturn (\r\n\t\t\t<div className={classNameColor}>\r\n\t\t\t\t<WrappedComponent {...props} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default Rainbow;\r\n\r\n","import React from \"react\";\r\n\r\nconst Contact = () => {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4 className=\"center\">Contact</h4>\r\n\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis excepturi ut pariatur, officiis repellendus tenetur delectus perspiciatis et numquam fuga beatae quas non impedit harum voluptatibus, nobis, dolores libero cumque?</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Contact;\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { deletePost } from \"../actions/postActions\";\r\n\r\nclass Post extends Component {\r\n\r\n\thandleClick = () => {\r\n\t\tthis.props.deletePost(this.props.post.id);\r\n\t\tthis.props.history.push(\"/\"); // redirect to homepage\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log(this.props); // has deletePost method and the id we need for it as a parameter\r\n\t\t// const post = this.state.post ? (\r\n\t\tconst post = this.props.post ? ( // we got new props, so state is out\r\n\t\t\t<div className=\"post\">\r\n\t\t\t\t<h4>\r\n\t\t\t\t\t{/* {this.state.post.title} */}\r\n\t\t\t\t\t{this.props.post.title}\r\n\t\t\t\t</h4>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t{/* {this.state.post.body} */}\r\n\t\t\t\t\t{this.props.post.body}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"center\">\r\n\t\t\t\t\t<button className=\"btn grey\" onClick={this.handleClick}>\r\n\t\t\t\t\t\tDelete Post\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t) : (\r\n\t\t\t<div className=\"center\">Loading post...</div>\r\n\t\t)\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t{ post }\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => { // (ownProps) refers to the props of the component before we attach the additional props from the redux store (warehouse)\r\n\tlet id = ownProps.match.params.post_id; // post_id because that's what we called its \"Route path\" in App.js\r\n\treturn {\r\n\t\t// cycle through posts on the state object and check if the post.id matches the new id\r\n\t\t// post: state.posts.find((post) => {\r\n\t\t// \treturn post.id === id\r\n\t\t// })\r\n\t\tpost: state.posts.find(post => post.id === id) // shorten if returning only one line\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tdeletePost: (id) => {\r\n\t\t\tdispatch( deletePost(id) )\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\r\n\r\n","export const deletePost = (id) => {\r\n\treturn {\r\n\t\ttype: \"DELETE_POST\",\r\n\t\tid\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport Post from './components/Post';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<BrowserRouter>\n\t\t\t\t<div className=\"app\">\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t\t\t<Route path=\"/about\" component={About} />\n\t\t\t\t\t\t<Route path=\"/contact\" component={Contact} />\n\t\t\t\t\t\t<Route path=\"/:post_id\" component={Post} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n\tposts: [\r\n\t\t{id: '1', title: 'Squirtle Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},\r\n\t\t{id: '2', title: 'Charmander Laid an Egg', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'},\r\n\t\t{id: '3', title: 'a Helix Fossil was Found', body: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur voluptate laborum perferendis, enim repellendus ipsam sunt autem at odit dolorum, voluptatum suscipit iste harum cum magni itaque animi laudantium fugiat'}\r\n\t]\r\n}\r\n\r\nconst rootReducer = ( state = initState, action ) => {\r\n\t// console.log(action);\r\n\tif ( action.type === \"DELETE_POST\" ) {\r\n\t\tlet newPosts = state.posts.filter(post => {\r\n\t\t\treturn action.id !== post.id;\r\n\t\t});\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tposts: newPosts\r\n\t\t}\r\n\t}\r\n\treturn state;\r\n}\r\n\r\nexport default rootReducer;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// to use redux we need this block\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n// ends\n\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));  *** default\n\nReactDOM.render(  // our own App renderer that uses redux\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}